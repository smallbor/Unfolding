# %% imports
# libraries
import torch
import numpy as np
from tqdm import tqdm
import matplotlib.pyplot as plt

# local imports
import MNIST_dataloader
import os
# %% set torches random seed
torch.random.manual_seed(0)

# %% preperations
# define parameters
data_loc = './' #change the data location to something that works for you
batch_size = 64

mu = 1
shrinkage =1  # \lambda
K = 100

# get dataloader
train_loader, test_loader = MNIST_dataloader.create_dataloaders(data_loc, batch_size)

# %% HINT
#hint: if you do not care about going over the data in mini-batches but rather want the entire dataset use:
x_clean_train = train_loader.dataset.Clean_Images
x_noisy_train = train_loader.dataset.Noisy_Images
labels_train  = train_loader.dataset.Labels

x_clean_test  = test_loader.dataset.Clean_Images
x_noisy_test  = test_loader.dataset.Noisy_Images
labels_test   = test_loader.dataset.Labels

# use these 10 examples as representations for all digits
x_clean_example = x_clean_test[0:10,:,:,:]
x_noisy_example = x_noisy_test[0:10,:,:,:]
labels_example = labels_test[0:10]

# %% ISTA
def softthreshold(x,shrinkage):
    """
    sgn(x)((|x|-\lambda),0) or sgn(x)*relu(|x|-lambda)
    """
    return torch.sgn(x)*torch.relu(torch.abs(x)-shrinkage)

# def ISTA(mu,shrinkage,K,y): # No Batch operation
#     A=torch.eye(y.shape[0])
#     x=torch.zeros(A.shape[1],1)
#     xs=[x]
#     for i in range(K):
#         y_=mu@A.T@y
#         x=softthreshold(y_+(torch.eye(x.shape[0])-mu@A.TA)@x,shrinkage)
#         xs.append(x)
#     return x,xs

def ISTA(mu,shrinkage,K,y):
    A=torch.eye(y.shape[1])
    x=torch.zeros(y.shape[0],A.shape[1])
    for i in tqdm(range(K)):
        y_=y@(mu*A)
        x_=x@(torch.eye(A.shape[1])-mu*A.T@A)
        x=softthreshold(y_+x_,shrinkage)
    return x

if _name=="main_":
    y=x_noisy_example.flatten(1)
    backgroud_coeff=1
    x=ISTA(mu,shrinkage,K,y+backgroud_coeff)

    row=3
    col=10
    fig=plt.figure(figsize=(col*5,row*5))
    ax=fig.subplots(3,10)
    x=x.reshape(-1,32,32)
    for i in range(10):
        ax[0][i].imshow(x_noisy_example[i].squeeze().numpy(),cmap="gray")
        ax[1][i].imshow(x[i].numpy()-backgroud_coeff,cmap="gray")
        ax[2][i].imshow(x_clean_example[i].squeeze().numpy(),cmap="gray")
    fig.tight_layout()
    os.makedirs("res_1",exist_ok=True)
    fig.savefig("res_1/denoised_image.png")